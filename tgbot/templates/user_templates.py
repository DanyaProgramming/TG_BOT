from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import math
from datetime import datetime

import tgbot.callback_datas.user_callback_datas as CallbackDatas

from settings import Config, Messages, CustomCommands, AutoDeliveries

from bot_settings.app import CURRENT_VERSION
from plbot.utils.stats import get_stats
from plbot import get_playerok_bot

from core.modules_manager import ModulesManager, Module
from uuid import UUID

from playerokapi import types as plapi_types
        
class System:
    """ –®–∞–±–ª–æ–Ω—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π """
    class Error:
        def text(error_text) -> str:
            msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: <b>{error_text}</b>"
            return msg

class Navigation:
    """ –®–∞–±–ª–æ–Ω—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É """

    class MenuNavigation:
        class Default:
            def text() -> str:
                msg = f"üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>" \
                    f"\n" \
                    f"\n<b>AUTO PLAYEROK</b>" \
                    f"\n–ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è Playerok" \
                    f"\n" \
                    f"\n" \
                    f"\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ ‚Üì"
                return msg
                
            def kb() -> InlineKeyboardMarkup:
                btn1 = InlineKeyboardButton(
                    text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞",
                    callback_data=CallbackDatas.SettingsNavigation(
                        to="default"
                    ).pack()
                )
                btn2 = InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data=CallbackDatas.MenuNavigation(
                        to="stats"
                    ).pack()
                )
                btn3 = InlineKeyboardButton(
                    text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
                    callback_data=CallbackDatas.MenuNavigation(
                        to="profile"
                    ).pack()
                )
                btn4 = InlineKeyboardButton(
                    text="üîå –ú–æ–¥—É–ª–∏",
                    callback_data=CallbackDatas.ModulesPagination(
                        page=0
                    ).pack()
                )
                btn5 = InlineKeyboardButton(
                    text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                    callback_data=CallbackDatas.InstructionNavigation(
                        to="default"
                    ).pack()
                )
                rows = [[btn1, btn2], [btn3, btn4], [btn5]]
                markup = InlineKeyboardMarkup(inline_keyboard=rows)
                return markup
                
        class Stats:
            class Error:
                def text() -> str:
                    msg = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Playerok –±–æ—Ç–∞</b>" \
                        f"\n" \
                        f"\n‚Üí –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n‚Üí –ü—Ä–æ–¥–∞–∂: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –ê–∫—Ç–∏–≤–Ω—ã—Ö: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –í–æ–∑–≤—Ä–∞—Ç–æ–≤: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
                    return msg

            class Loading:
                def text() -> str:
                    msg = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Playerok –±–æ—Ç–∞</b>" \
                        f"\n" \
                        f"\n‚Üí –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n‚Üí –ü—Ä–æ–¥–∞–∂: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –ê–∫—Ç–∏–≤–Ω—ã—Ö: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –í–æ–∑–≤—Ä–∞—Ç–æ–≤: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
                    return msg
                
            class Default:
                def text() -> str:
                    stats = get_stats()
                    msg = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Playerok –±–æ—Ç–∞</b>" \
                        f"\n" \
                        f"\n‚Üí –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: <code>{stats['bot_launch_time'].strftime('%d.%m.%Y %H:%M:%S')}</code>" \
                        f"\n" \
                        f"\n‚Üí –ü—Ä–æ–¥–∞–∂: <code>{stats['orders_completed']}</code>" \
                        f"\n‚Üí –ê–∫—Ç–∏–≤–Ω—ã—Ö: <code>{stats['active_orders']}</code>" \
                        f"\n‚Üí –í–æ–∑–≤—Ä–∞—Ç–æ–≤: <code>{stats['orders_refunded']}</code>" \
                        f"\n‚Üí –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{stats['earned_money']}</code> —Ä." \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
                    return msg
                    
                def kb() -> InlineKeyboardMarkup:
                    btn_refresh = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=CallbackDatas.MenuNavigation(
                            to="stats"
                        ).pack()
                    )
                    btn_back = InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=CallbackDatas.MenuNavigation(
                            to="default"
                        ).pack()
                    )
                    rows = [[btn_refresh], [btn_back]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
            
        class Profile:
            class Error:
                def text() -> str:
                    msg = "üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>" \
                        f"\n" \
                        f"\n‚Üí ID: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –ù–∏–∫–Ω–µ–π–º: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí Email: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –†–æ–ª—å: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n‚Üí –†–µ–π—Ç–∏–Ω–≥: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n‚Üí –ë–∞–ª–∞–Ω—Å:" \
                        f"\n  ‚îï –í—Å–µ–≥–æ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n  ‚îï –î–æ—Å—Ç—É–ø–Ω–æ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n  ‚îï –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n‚Üí –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:" \
                        f"\n  ‚îï –ü—Ä–µ–¥–º–µ—Ç—ã: " \
                        f"\n      ‚îï –í—Å–µ–≥–æ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n      ‚îï –ò—Å—Ç—ë–∫—à–∏—Ö: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n  ‚îï –°–¥–µ–ª–∫–∏: " \
                        f"\n      ‚îï –í—Å–µ–≥–æ –≤—Ö–æ–¥—è—â–∏—Ö: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n      ‚îï –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—Ö–æ–¥—è—â–∏—Ö: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n      ‚îï –í—Å–µ–≥–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n      ‚îï –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n‚Üí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
                    return msg

            class Loading:
                def text() -> str:
                    msg = "üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>" \
                        f"\n" \
                        f"\n‚Üí ID: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –ù–∏–∫–Ω–µ–π–º: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí Email: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –†–æ–ª—å: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n‚Üí –†–µ–π—Ç–∏–Ω–≥: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n‚Üí –ë–∞–ª–∞–Ω—Å:" \
                        f"\n  ‚îï –í—Å–µ–≥–æ: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n  ‚îï –î–æ—Å—Ç—É–ø–Ω–æ: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n  ‚îï –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n‚Üí –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:" \
                        f"\n  ‚îï –ü—Ä–µ–¥–º–µ—Ç—ã: " \
                        f"\n      ‚îï –í—Å–µ–≥–æ: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n      ‚îï –ò—Å—Ç—ë–∫—à–∏—Ö: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n  ‚îï –°–¥–µ–ª–∫–∏: " \
                        f"\n      ‚îï –í—Å–µ–≥–æ –≤—Ö–æ–¥—è—â–∏—Ö: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n      ‚îï –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—Ö–æ–¥—è—â–∏—Ö: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n      ‚îï –í—Å–µ–≥–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n      ‚îï –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n‚Üí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
                    return msg
                
            class Default:
                def text() -> str:
                    playerokbot = get_playerok_bot()
                    profile = playerokbot.playerok_account.profile
                    msg = "üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>" \
                        f"\n" \
                        f"\n‚Üí ID: <code>{profile.id}</code>" \
                        f"\n‚Üí –ù–∏–∫–Ω–µ–π–º: <b>{profile.username}</b>" \
                        f"\n‚Üí Email: <b>{profile.email}</b>" \
                        f"\n‚Üí –†–æ–ª—å: <b>{profile.role.name}</b>" \
                        f"\n" \
                        f"\n‚Üí –†–µ–π—Ç–∏–Ω–≥: <b>{profile.rating}</b>" \
                        f"\n‚Üí –ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤: <b>{profile.reviews_count}</b>" \
                        f"\n" \
                        f"\n‚Üí –ë–∞–ª–∞–Ω—Å:" \
                        f"\n  ‚îï –í—Å–µ–≥–æ: <b>{profile.balance.value}</b>" \
                        f"\n  ‚îï –î–æ—Å—Ç—É–ø–Ω–æ: <b>{profile.balance.available}</b>" \
                        f"\n  ‚îï –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: <b>{profile.balance.frozen}</b>" \
                        f"\n" \
                        f"\n‚Üí –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:" \
                        f"\n  ‚îï –ü—Ä–µ–¥–º–µ—Ç—ã: " \
                        f"\n      ‚îï –í—Å–µ–≥–æ: <b>{profile.stats.items.total}</b>" \
                        f"\n      ‚îï –ò—Å—Ç—ë–∫—à–∏—Ö: <b>{profile.stats.items.finished}</b>" \
                        f"\n  ‚îï –°–¥–µ–ª–∫–∏: " \
                        f"\n      ‚îï –í—Å–µ–≥–æ –≤—Ö–æ–¥—è—â–∏—Ö: <b>{profile.stats.deals.incoming.total}</b>" \
                        f"\n      ‚îï –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—Ö–æ–¥—è—â–∏—Ö: <b>{profile.stats.deals.incoming.finished}</b>" \
                        f"\n      ‚îï –í—Å–µ–≥–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö: <b>{profile.stats.deals.outgoing.total}</b>" \
                        f"\n      ‚îï –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö: <b>{profile.stats.deals.outgoing.finished}</b>" \
                        f"\n" \
                        f"\n‚Üí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <b>{datetime.fromisoformat(profile.created_at.replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M:%S')}</b>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
                    return msg
                    
                def kb() -> InlineKeyboardMarkup:
                    btn_refresh = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=CallbackDatas.MenuNavigation(
                            to="profile"
                        ).pack()
                    )
                    btn_back = InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=CallbackDatas.MenuNavigation(
                            to="default"
                        ).pack()
                    )
                    rows = [[btn_refresh], [btn_back]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
                
    class InstructionNavigation:
        class Default:
            def text() -> str:
                msg = "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>" \
                    "\n–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –æ–ø–∏—Å–∞–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º" \
                    "\n" \
                    "\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ ‚Üì"
                return msg
                
            def kb() -> InlineKeyboardMarkup:
                btn1 = InlineKeyboardButton(
                    text="‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã",
                    callback_data=CallbackDatas.InstructionNavigation(
                        to="commands"
                    ).pack()
                )
                btn_back = InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=CallbackDatas.MenuNavigation(
                        to="default"
                    ).pack()
                )
                rows = [[btn1], [btn_back]]
                markup = InlineKeyboardMarkup(inline_keyboard=rows)
                return markup
            
        class Commands:
            def text() -> str:
                msg = "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí ‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã</b>" \
                    "\n" \
                    "\n<b>–ö–æ–º–∞–Ω–¥—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b>" \
                    "\n‚Üí <code>!–∫–æ–º–∞–Ω–¥—ã</code> ‚Äî –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–∞–º–∏" \
                    "\n‚Üí <code>!–ø—Ä–æ–¥–∞–≤–µ—Ü</code> ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º (–ø–∏—à–µ—Ç –≤–∞–º –≤ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ –ø–æ–º–æ—â–∏)" \
                    "\n" \
                    "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
                return msg
            
            def kb() -> InlineKeyboardMarkup:
                btn_back = InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=CallbackDatas.MenuNavigation(
                        to="instruction"
                    ).pack()
                )
                rows = [[btn_back]]
                markup = InlineKeyboardMarkup(inline_keyboard=rows)
                return markup

    class Settings:
        class Default:
            class Loading:
                def text() -> str:
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>" \
                        f"\n" \
                        f"\n<b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>" \
                        f"\n‚Üí –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –Æ–∑–µ—Ä –∞–≥–µ–Ω—Ç: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Üì"
                    return msg
                
            class Error:
                def text() -> str:
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>" \
                        f"\n" \
                        f"\n<b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>" \
                        f"\n‚Üí –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –Æ–∑–µ—Ä –∞–≥–µ–Ω—Ç: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Üì"
                    return msg
                
            class Default:
                def text() -> str:
                    config = Config.get()
                    token = (config["token"][:3] + "*" * (len(config["token"]) - 3))[:32] if config["token"] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    user_agent = config["user_agent"] if config["user_agent"] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>" \
                        f"\n" \
                        f"\n<b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>:" \
                        f"\n‚Üí –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞: <code>{token}</code>" \
                        f"\n‚Üí –Æ–∑–µ—Ä –∞–≥–µ–Ω—Ç: <code>{user_agent}</code>" \
                        f"\n" \
                        f"\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Üì"
                    return msg
                
                def kb() -> InlineKeyboardMarkup:
                    btn1 = InlineKeyboardButton(
                        text="üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="authorization"
                        ).pack()
                    )
                    btn2 = InlineKeyboardButton(
                        text="üì∂ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="connection"
                        ).pack()
                    )
                    btn3 = InlineKeyboardButton(
                        text="üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="items"
                        ).pack()
                    )
                    btn4 = InlineKeyboardButton(
                        text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="notifications"
                        ).pack()
                    )
                    btn5 = InlineKeyboardButton(
                        text="‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è",
                        callback_data=CallbackDatas.MessagesPagination(
                            page=0
                        ).pack()
                    )
                    btn6 = InlineKeyboardButton(
                        text="‚å®Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã",
                        callback_data=CallbackDatas.CustomCommandsPagination(
                            page=0
                        ).pack()
                    )
                    btn7 = InlineKeyboardButton(
                        text="üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞",
                        callback_data=CallbackDatas.AutoDeliveriesPagination(
                            page=0
                        ).pack()
                    )
                    btn8 = InlineKeyboardButton(
                        text="üîß –ü—Ä–æ—á–µ–µ",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="other"
                        ).pack()
                    )
                    btn_refresh = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="default"
                        ).pack()
                    )
                    btn_back = InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=CallbackDatas.MenuNavigation(
                            to="default"
                        ).pack()
                    )
                    rows = [[btn1, btn2], [btn3, btn4], [btn5, btn6], [btn7, btn8], [btn_refresh], [btn_back]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
            
        class Authorization:
            class Error:
                def text() -> str:
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>"\
                            f"\n" \
                            f"\n‚Üí –¢–æ–∫–µ–Ω: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n‚Üí –Æ–∑–µ—Ä –∞–≥–µ–Ω—Ç: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                    return msg
                
            class Loading:
                def text() -> str:
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>"\
                            f"\n" \
                            f"\n‚Üí –¢–æ–∫–µ–Ω: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n‚Üí –Æ–∑–µ—Ä –∞–≥–µ–Ω—Ç: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                    return msg
                    
            class Default:
                def text() -> str:
                    config = Config.get()
                    user_agent = config["user_agent"] if config["user_agent"] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    token = (config["token"][:3] + "*" * (len(config['token']) - 3))[:32] if config["token"] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>"\
                            f"\n" \
                            f"\n‚Üí –¢–æ–∫–µ–Ω: <code>{token}</code>" \
                            f"\n‚Üí –Æ–∑–µ—Ä –∞–≥–µ–Ω—Ç: <code>{user_agent}</code>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                    return msg
                
                def kb() -> InlineKeyboardMarkup:
                    config = Config.get()
                    user_agent = config["user_agent"] if config["user_agent"] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    token = (config["token"][:3] + "*" * (len(config['token']) - 3))[:32] if config["token"] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    btn1 = InlineKeyboardButton(
                        text=f"üîë –¢–æ–∫–µ–Ω: {token}",
                        callback_data="enter_token"
                    )
                    btn2 = InlineKeyboardButton(
                        text=f"üé© –Æ–∑–µ—Ä –∞–≥–µ–Ω—Ç: {user_agent}",
                        callback_data="enter_user_agent"
                    )
                    btn_refresh = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="authorization"
                        ).pack()
                    )
                    btn_back = InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="default"
                        ).pack()
                    )
                    rows = [[btn1, btn2], [btn_refresh], [btn_back]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
                
            class EnterToken:
                def text() -> str:
                    config = Config.get()
                    msg = f"üîë <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Playerok –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Üì</b>" \
                            f"\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{config['token']}</code>"
                    return msg
                
            class TokenChanged:
                def text(new):
                    msg = f"‚úÖ <b>–¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <code>{new}</code>"
                    return msg
                
            class EnterUserAgent:
                def text() -> str:
                    config = Config.get()
                    user_agent = config["user_agent"] if config["user_agent"] != "" else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    msg = f"üé© <b>–í–≤–µ–¥–∏—Çe –Ω–æ–≤—ã–π —é–∑–µ—Ä –∞–≥–µ–Ω—Ç –≤–∞—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ ‚Üì</b>" \
                            f"\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{user_agent}</code>"
                    return msg
                
            class UserAgentChanged:
                def text(new):
                    msg = f"‚úÖ <b>–Æ–∑–µ –∞–≥–µ–Ω—Ç</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <code>{new}</code>"
                    return msg
                
        class Connection:
            class Error:
                def text() -> str:
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üì∂ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</b>"\
                            f"\n" \
                            f"\n‚Üí –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ playerok.com: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n‚Üí –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ playerok.com: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n" \
                            f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ playerok.com?</b>" \
                            f"\n–≠—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å —Å–∞–π—Ç–∞ Playerok. " \
                            f"–ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –∞ –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∏—à—ë–ª - –±–æ—Ç –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É. –ï—Å–ª–∏ —É –≤–∞—Å —Å–ª–∞–±—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, " \
                            f"—É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ" \
                            f"\n" \
                            f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ playerok.com?</b>" \
                            f"\n–° –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ Playerok –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π. " \
                            f"–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å—Ç–∞–≤–∏—Ç—å –Ω–∏–∂–µ 4 —Å–µ–∫—É–Ω–¥, —Ç–∞–∫ –∫–∞–∫ Playerok –ø–æ–ø—Ä–æ—Å—Ç—É –º–æ–∂–µ—Ç –∑–∞–±–∞–Ω–∏—Ç—å –≤–∞—à IP " \
                            f"–∞–¥—Ä–µ—Å, –∏ –≤—ã —É–∂–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å –Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å—ã" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                    return msg

            class Loading:
                def text() -> str:
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üì∂ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</b>"\
                            f"\n" \
                            f"\n‚Üí –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ playerok.com: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n‚Üí –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ playerok.com: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n" \
                            f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ playerok.com?</b>" \
                            f"\n–≠—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å —Å–∞–π—Ç–∞ Playerok. " \
                            f"–ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –∞ –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∏—à—ë–ª - –±–æ—Ç –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É. –ï—Å–ª–∏ —É –≤–∞—Å —Å–ª–∞–±—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, " \
                            f"—É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ" \
                            f"\n" \
                            f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ playerok.com?</b>" \
                            f"\n–° –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ Playerok –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π. " \
                            f"–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å—Ç–∞–≤–∏—Ç—å –Ω–∏–∂–µ 4 —Å–µ–∫—É–Ω–¥, —Ç–∞–∫ –∫–∞–∫ Playerok –ø–æ–ø—Ä–æ—Å—Ç—É –º–æ–∂–µ—Ç –∑–∞–±–∞–Ω–∏—Ç—å –≤–∞—à IP " \
                            f"–∞–¥—Ä–µ—Å, –∏ –≤—ã —É–∂–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å –Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å—ã" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                    return msg

            class Default:
                def text() -> str:
                    config = Config.get()
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üì∂ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</b>"\
                            f"\n" \
                            f"\n‚Üí –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ playerok.com: <code>{config['playerokapi_requests_timeout']}</code> —Å–µ–∫." \
                            f"\n‚Üí –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ playerok.com: <code>{config['playerokapi_listener_requests_delay']}</code> —Å–µ–∫." \
                            f"\n" \
                            f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ playerok.com?</b>" \
                            f"\n–≠—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å —Å–∞–π—Ç–∞ Playerok. " \
                            f"–ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –∞ –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∏—à—ë–ª - –±–æ—Ç –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É. –ï—Å–ª–∏ —É –≤–∞—Å —Å–ª–∞–±—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, " \
                            f"—É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ" \
                            f"\n" \
                            f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ playerok.com?</b>" \
                            f"\n–° –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ Playerok –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π. " \
                            f"–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å—Ç–∞–≤–∏—Ç—å –Ω–∏–∂–µ 4 —Å–µ–∫—É–Ω–¥, —Ç–∞–∫ –∫–∞–∫ Playerok –ø–æ–ø—Ä–æ—Å—Ç—É –º–æ–∂–µ—Ç –∑–∞–±–∞–Ω–∏—Ç—å –≤–∞—à IP " \
                            f"–∞–¥—Ä–µ—Å, –∏ –≤—ã —É–∂–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å –Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å—ã" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                    return msg

                def kb() -> InlineKeyboardMarkup:
                    config = Config.get()
                    playerokapi_requests_timeout = config["playerokapi_requests_timeout"] if config["playerokapi_requests_timeout"] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    playerokapi_listener_requests_delay = config["playerokapi_listener_requests_delay"] if config["playerokapi_listener_requests_delay"] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    btn1 = InlineKeyboardButton(
                        text=f"üõú –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {playerokapi_requests_timeout}",
                        callback_data="enter_playerokapi_requests_timeout"
                    )
                    btn2 = InlineKeyboardButton(
                        text=f"‚è±Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤: {playerokapi_listener_requests_delay}",
                        callback_data="enter_playerokapi_listener_requests_delay"
                    )
                    btn_update = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="connection"
                        ).pack()
                    )
                    btn_back = InlineKeyboardButton(
                        text="‚Üê –ù–∞–∑–∞–¥",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="default"
                        ).pack()
                    )
                    rows = [[btn1, btn2], [btn_update], [btn_back]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
            
            class EnterPlayerokApiRequestsTimeout:
                def text() -> str:
                    config = Config.get()
                    msg = f"üõú <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ playerok.com ‚Üì</b>" \
                            f"\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{config['playerokapi_requests_timeout']}</code> —Å–µ–∫."
                    return msg
                
            class PlayerokApiRequestsTimeoutChanged:
                def text(new):
                    msg = f"‚úÖ <b>–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ playerok.com</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <code>{new}</code> —Å–µ–∫."
                    return msg
            
            class EnterPlayerokApiListenerRequestsDelay:
                def text() -> str:
                    config = Config.get()
                    msg = f"‚è±Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ playerok.com ‚Üì</b>" \
                            f"\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{config['playerokapi_listener_requests_delay']}</code> —Å–µ–∫."
                    return msg
                
            class PlayerokApiListenerRequestsDelayChanged:
                def text(new):
                    msg = f"‚úÖ <b>–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ playerok.com</b> –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <code>{new}</code> —Å–µ–∫."
                    return msg

        class Items:
            class Error:
                def text() -> str:
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã</b>"\
                            f"\n" \
                            f"\n‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n‚Üí –°—Ç–∞—Ç—É—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n" \
                            f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤?</b>" \
                            f"\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫—Ç–æ-—Ç–æ –∫—É–ø–∏—Ç –≤–∞—à –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ Playerok, –æ–Ω —Å—Ä–∞–∑—É –∂–µ –ø—Ä–æ–ø–∞–¥—ë—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö " \
                            f"–Ω–∞ —Å–∞–π—Ç–µ. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ \"–ø–æ–¥–Ω–∏–º–∞—Ç—å –Ω–∞ –Ω–æ–≥–∏\" –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π " \
                            f"—Ç–æ–ª—å–∫–æ —á—Ç–æ –∫—É–ø–∏–ª–∏, —á—Ç–æ–±—ã –æ–Ω —Å–Ω–æ–≤–∞ –±—ã–ª –≤ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö." \
                            f"\n" \
                            f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ c—Ç–∞—Ç—É—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤?</b>" \
                            f"\n–° –∫–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. " \
                            f"–£—á—Ç–∏—Ç–µ, —á—Ç–æ –∑–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –Ω—É–∂–Ω–æ –ø–ª–∞—Ç–∏—Ç—å, –∏ –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ –±—É–¥–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è " \
                            f"—ç—Ç–æ–≥–æ, —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª—è–µ–Ω –ø–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É." \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                    return msg

            class Loading:
                def text() -> str:
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã</b>"\
                            f"\n" \
                            f"\n‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–æ–≤: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n‚Üí –°—Ç–∞—Ç—É—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n" \
                            f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤?</b>" \
                            f"\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫—Ç–æ-—Ç–æ –∫—É–ø–∏—Ç –≤–∞—à –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ Playerok, –æ–Ω —Å—Ä–∞–∑—É –∂–µ –ø—Ä–æ–ø–∞–¥—ë—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö " \
                            f"–Ω–∞ —Å–∞–π—Ç–µ. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ \"–ø–æ–¥–Ω–∏–º–∞—Ç—å –Ω–∞ –Ω–æ–≥–∏\" –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π " \
                            f"—Ç–æ–ª—å–∫–æ —á—Ç–æ –∫—É–ø–∏–ª–∏, —á—Ç–æ–±—ã –æ–Ω —Å–Ω–æ–≤–∞ –±—ã–ª –≤ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö." \
                            f"\n" \
                            f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ c—Ç–∞—Ç—É—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤?</b>" \
                            f"\n–° –∫–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. " \
                            f"–£—á—Ç–∏—Ç–µ, —á—Ç–æ –∑–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –Ω—É–∂–Ω–æ –ø–ª–∞—Ç–∏—Ç—å, –∏ –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ –±—É–¥–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è " \
                            f"—ç—Ç–æ–≥–æ, —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª—è–µ–Ω –ø–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É." \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                    return msg

            class Default:
                def text() -> str:
                    config = Config.get()
                    auto_restore_items_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config.get("auto_restore_items_enabled") == True else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                    if config.get("auto_restore_items_priority_status") == "DEFAULT": auto_restore_items_priority_status = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π"
                    elif config.get("auto_restore_items_priority_status") == "PREMIUM": auto_restore_items_priority_status = "‚ö° –ü—Ä–µ–º–∏—É–º"
                    else: auto_restore_items_priority_status = "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã</b>"\
                            f"\n" \
                            f"\n‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: <code>{auto_restore_items_enabled}</code>" \
                            f"\n‚Üí –°—Ç–∞—Ç—É—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: <code>{auto_restore_items_priority_status}</code>" \
                            f"\n" \
                            f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤?</b>" \
                            f"\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫—Ç–æ-—Ç–æ –∫—É–ø–∏—Ç –≤–∞—à –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ Playerok, –æ–Ω —Å—Ä–∞–∑—É –∂–µ –ø—Ä–æ–ø–∞–¥—ë—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö " \
                            f"–Ω–∞ —Å–∞–π—Ç–µ. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ \"–ø–æ–¥–Ω–∏–º–∞—Ç—å –Ω–∞ –Ω–æ–≥–∏\" –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π " \
                            f"—Ç–æ–ª—å–∫–æ —á—Ç–æ –∫—É–ø–∏–ª–∏, —á—Ç–æ–±—ã –æ–Ω —Å–Ω–æ–≤–∞ –±—ã–ª –≤ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö." \
                            f"\n" \
                            f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ c—Ç–∞—Ç—É—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤?</b>" \
                            f"\n–° –∫–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. " \
                            f"–£—á—Ç–∏—Ç–µ, —á—Ç–æ –∑–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –Ω—É–∂–Ω–æ –ø–ª–∞—Ç–∏—Ç—å, –∏ –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ –±—É–¥–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è " \
                            f"—ç—Ç–æ–≥–æ, —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª—è–µ–Ω –ø–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É." \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì" 
                    return msg

                def kb() -> InlineKeyboardMarkup:
                    config = Config.get()
                    auto_restore_items_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["auto_restore_items_enabled"] == True else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                    if config.get("auto_restore_items_priority_status") == "DEFAULT": auto_restore_items_priority_status = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π"
                    elif config.get("auto_restore_items_priority_status") == "PREMIUM": auto_restore_items_priority_status = "‚ö° –ü—Ä–µ–º–∏—É–º"
                    else: auto_restore_items_priority_status = "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    btn1 = InlineKeyboardButton(
                        text=f"‚¨ÜÔ∏è –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {auto_restore_items_enabled}",
                        callback_data="disable_auto_restore_items" if config.get("auto_restore_items_enabled") else "enable_auto_restore_items"
                    )
                    btn2 = InlineKeyboardButton(
                        text=f"‚≠ê –°—Ç–∞—Ç—É—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {auto_restore_items_priority_status}",
                        callback_data="premium_auto_restore_items_priority_status" if config.get("auto_restore_items_priority_status") == "DEFAULT" else "default_auto_restore_items_priority_status"
                    )
                    btn_refresh = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="items"
                        ).pack()
                    )
                    btn_back = InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="default"
                        ).pack()
                    )
                    rows = [[btn1], [btn2], [btn_refresh], [btn_back]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup

        class Notifications:
            class Error:
                def text() -> str:
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>"\
                            f"\n" \
                            f"\n‚Üí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ TG –æ —Å–æ–±—ã—Ç–∏—è—Ö –±–æ—Ç–∞: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n‚Üí ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n" \
                            f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ TG –æ —Å–æ–±—ã—Ç–∏—è—Ö –±–æ—Ç–∞?</b>" \
                            f"\n–í —É–∫–∞–∑–∞–Ω–Ω—ã–π Telegram —á–∞—Ç –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –±–æ—Ç–∞ " \
                            f"(–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏, –Ω–æ–≤—ã–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Ç.–¥.). –ß—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–ª " \
                            f"—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª/—á–∞—Ç, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –Ω—ë–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º." \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                    return msg

            class Loading:
                def text() -> str:
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>"\
                            f"\n" \
                            f"\n‚Üí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ TG –æ —Å–æ–±—ã—Ç–∏—è—Ö –±–æ—Ç–∞: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n‚Üí ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n" \
                            f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ TG –æ —Å–æ–±—ã—Ç–∏—è—Ö –±–æ—Ç–∞?</b>" \
                            f"\n–í —É–∫–∞–∑–∞–Ω–Ω—ã–π Telegram —á–∞—Ç –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –±–æ—Ç–∞ " \
                            f"(–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏, –Ω–æ–≤—ã–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Ç.–¥.). –ß—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–ª " \
                            f"—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª/—á–∞—Ç, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –Ω—ë–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º." \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                    return msg

            class Default:
                def text() -> str:
                    config = Config.get()
                    bot_event_notifications_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config.get("bot_event_notifications_enabled") else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                    bot_event_notifications_chat_id = config.get("bot_event_notifications_chat_id") or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>"\
                            f"\n" \
                            f"\n‚Üí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ TG –æ —Å–æ–±—ã—Ç–∏—è—Ö –±–æ—Ç–∞: <code>{bot_event_notifications_enabled}</code>" \
                            f"\n‚Üí ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <code>{bot_event_notifications_chat_id}</code>" \
                            f"\n" \
                            f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ TG –æ —Å–æ–±—ã—Ç–∏—è—Ö –±–æ—Ç–∞?</b>" \
                            f"\n–í —É–∫–∞–∑–∞–Ω–Ω—ã–π Telegram —á–∞—Ç –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –±–æ—Ç–∞ " \
                            f"(–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏, –Ω–æ–≤—ã–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Ç.–¥.). –ß—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–ª " \
                            f"—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª/—á–∞—Ç, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –Ω—ë–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º." \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì" 
                    return msg

                def kb() -> InlineKeyboardMarkup:
                    config = Config.get()
                    bot_event_notifications_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config.get("bot_event_notifications_enabled") else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                    bot_event_notifications_chat_id = config.get("bot_event_notifications_chat_id") or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    btn1 = InlineKeyboardButton(
                        text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ TG –æ —Å–æ–±—ã—Ç–∏—è—Ö –±–æ—Ç–∞: {bot_event_notifications_enabled}",
                        callback_data="disable_bot_event_notifications" if config.get("bot_event_notifications_enabled") else "enable_bot_event_notifications"
                    )
                    btn2 = InlineKeyboardButton(
                        text=f"üí¨ ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {bot_event_notifications_chat_id}",
                        callback_data="enter_bot_event_notifications_chat_id"
                    )
                    btn_refresh = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="notifications"
                        ).pack()
                    )
                    btn_back = InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="default"
                        ).pack()
                    )
                    rows = [[btn1], [btn2], [btn_refresh], [btn_back]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup

            class EnterChatId:  
                def text() -> str:
                    config = Config.get()
                    bot_event_notifications_chat_id = config.get("bot_event_notifications_chat_id") or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    msg = f"üí¨ <b>–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚Üì</b>" \
                          f"\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{bot_event_notifications_chat_id}</code>" \
                          f"\n–î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–≤–æ–¥, –∫–∞–∫ —á–∏—Å–ª–æ–≤–æ–≥–æ ID, —Ç–∞–∫ –∏ —Ç—ç–≥–∞ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @testchannel)"
                    return msg

            class ChatIdChanged:  
                def text(new) -> str:
                    msg = f"‚úÖ ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π <b>–±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b> –Ω–∞ <code>{new}</code>"
                    return msg
                
        class CustomCommands:
            class Pagination:
                def text() -> str:
                    custom_commands = CustomCommands.get()
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b> ‚Üí ‚å®Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>" \
                            f"\n–í—Å–µ–≥–æ <b>{len(custom_commands.keys())}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –≤ –∫–æ–Ω—Ñ–∏–≥–µ" \
                            f"\n\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üì"
                    return msg
                
                def kb(page: int = 0) -> InlineKeyboardMarkup:
                    custom_commands = CustomCommands.get()

                    rows = []
                    items_per_page = 7
                    total_pages = math.ceil(len(custom_commands.keys())/items_per_page)
                    total_pages = total_pages if total_pages > 0 else 1

                    if page < 0:
                        page = 0
                    elif page >= total_pages:
                        page = total_pages-1

                    start_offset = page * items_per_page
                    end_offset = start_offset + items_per_page

                    for command in list(custom_commands.keys())[start_offset:end_offset]:
                        command_text = "\n".join(custom_commands[command])
                        btn = InlineKeyboardButton(
                            text=f'{command} ‚Üí {command_text}',
                            callback_data=CallbackDatas.CustomCommandPage(
                                command=command
                            ).pack()
                        )
                        rows.append([btn])
                        
                    buttons_row = []
                    if page > 0:
                        btn_back = InlineKeyboardButton(
                            text="‚Üê",
                            callback_data=CallbackDatas.CustomCommandsPagination(
                                page=page-1
                            ).pack()
                        )
                    else:
                        btn_back = InlineKeyboardButton(
                            text="üõë",
                            callback_data="123"
                        )
                    buttons_row.append(btn_back)
                        
                    btn_pages = InlineKeyboardButton(
                        text=f"{page+1}/{total_pages}",
                        callback_data="enter_custom_command_page"
                    )
                    buttons_row.append(btn_pages)
                    
                    if page < total_pages-1:
                        btn_next = InlineKeyboardButton(
                            text="‚Üí",
                            callback_data=CallbackDatas.CustomCommandsPagination(
                                page=page+1
                            ).pack()
                        )
                    else:
                        btn_next = InlineKeyboardButton(
                            text="üõë",
                            callback_data="123"
                        )
                    buttons_row.append(btn_next)
                    rows.append(buttons_row)

                    btn1 = InlineKeyboardButton(
                        text="‚ûï‚å®Ô∏è –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É",
                        callback_data="enter_custom_command"
                    )
                    rows.append([btn1])
                    btn2 = InlineKeyboardButton(
                        text="üö™ –í—ã—Ö–æ–¥",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="default"
                        ).pack()
                    )
                    rows.append([btn2])
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
                
            class Page:
                class Error:
                    def text() -> str:
                        msg = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã</b>" \
                            f"\n" \
                            f"\n‚Üí –ö–æ–º–∞–Ω–¥–∞: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n‚Üí –û—Ç–≤–µ—Ç: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                        return msg

                class Loading:
                    def text() -> str:
                        msg = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã</b>" \
                            f"\n" \
                            f"\n‚Üí –ö–æ–º–∞–Ω–¥–∞: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n‚Üí –û—Ç–≤–µ—Ç: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                        return msg

                class Default:
                    def text(command: str) -> str:
                        custom_commands = CustomCommands.get()
                        command_text = "\n".join(custom_commands[command])
                        msg = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã</b>" \
                            f"\n" \
                            f"\n‚Üí –ö–æ–º–∞–Ω–¥–∞: <code>{command}</code>" \
                            f"\n‚Üí –û—Ç–≤–µ—Ç: \n<blockquote>{command_text}</blockquote>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                        return msg
                    
                    def kb(command, page) -> InlineKeyboardMarkup:
                        custom_commands = CustomCommands.get()
                        command_text = "\n".join(custom_commands[command]) if custom_commands[command] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                        btn1 = InlineKeyboardButton(
                            text=f"‚úçÔ∏è –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {command_text}",
                            callback_data="enter_new_custom_command_answer"
                        )
                        btn2 = InlineKeyboardButton(
                            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É",
                            callback_data="confirm_deleting_custom_command"
                        )
                        btn_refresh = InlineKeyboardButton(
                            text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                            callback_data=CallbackDatas.CustomCommandPage(
                                command=command
                            ).pack()
                        )
                        btn_back = InlineKeyboardButton(
                            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                            callback_data=CallbackDatas.CustomCommandsPagination(
                                page=page
                            ).pack()
                        )
                        rows = [[btn1, btn2], [btn_refresh], [btn_back]]
                        markup = InlineKeyboardMarkup(inline_keyboard=rows)
                        return markup
                
            class EnterCustomCommandsPage:
                def text() -> str:
                    msg = f"üìÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Üì" 
                    return msg
                
            class EnterCustomCommand:
                def text() -> str:
                    msg = f"‚å®Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ‚Üì</b>" \
                            f"\n–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, —á—Ç–æ–±—ã –µ–º—É –≤—ã–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç"
                    return msg
                
            class EnterCustomCommandAnswer:
                def text() -> str:
                    msg = f"‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∫–æ–º–∞–Ω–¥—ã ‚Üì</b>" \
                            f"\n–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã"
                    return msg
                
            class ConfirmAddingCustomCommand:
                def text(command, command_answer) -> str:
                    msg = f"‚ûï‚å®Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã</b>" \
                            f"\n–ö–æ–º–∞–Ω–¥–∞: <code>{command}</code>" \
                            f"\n–û—Ç–≤–µ—Ç: <blockquote>{command_answer}</blockquote>"
                    return msg

                def kb() -> InlineKeyboardMarkup:
                    btn1 = InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data="add_custom_command"
                    )
                    btn2 = InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data="destroy"
                    )
                    rows = [[btn1, btn2]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
                
            class CustomCommandAdded:
                def text(command) -> str:
                    msg = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ <code>{command}</code> <b>–±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞</b>" 
                    return msg
                
            class EnterNewCustomCommandAnswer:
                def text(command) -> str:
                    custom_commands = CustomCommands.get()
                    command_answer = "\n".join(custom_commands[command])
                    msg = f"‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ ‚Üì</b>" \
                            f"\n–ö–æ–º–∞–Ω–¥–∞: <code>{command}</code>" \
                            f"\n–¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç: <blockquote>{command_answer}</blockquote>"
                    return msg
                
            class CustomCommandAnswerChanged:
                def text(new, command) -> str:
                    msg = f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã <code>{command}</code> <b>–±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b> –Ω–∞:\n<blockquote>{new}</blockquote>" 
                    return msg
                
            class ConfirmDeletingCustomCommand:
                def text(command) -> str:
                    msg = f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã</b>" \
                        f"\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É <code>{command}</code>" 
                    return msg

                def kb() -> InlineKeyboardMarkup:
                    btn1 = InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data="delete_custom_command"
                    )
                    btn2 = InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data="destroy"
                    )
                    rows = [[btn1, btn2]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
                
            class CustomComandDeleted:
                def text(command) -> str:
                    msg = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ <code>{command}</code> <b>–±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞</b>" 
                    return msg
                
        class AutoDeliveries:
            class Pagination:
                def text() -> str:
                    auto_deliveries: list = AutoDeliveries.get()
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b> ‚Üí üöÄ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞</b>" \
                            f"\n–í—Å–µ–≥–æ <b>{len(auto_deliveries)}</b> –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ-–≤—ã–¥–∞—á –≤ –∫–æ–Ω—Ñ–∏–≥–µ" \
                            f"\n\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üì"
                    return msg
                
                def kb(page: int = 0) -> InlineKeyboardMarkup:
                    auto_deliveries: list = AutoDeliveries.get()

                    rows = []
                    items_per_page = 7
                    total_pages = math.ceil(len(auto_deliveries)/items_per_page)
                    total_pages = total_pages if total_pages > 0 else 1

                    if page < 0:
                        page = 0
                    elif page >= total_pages:
                        page = total_pages-1

                    start_offset = page * items_per_page
                    end_offset = start_offset + items_per_page

                    for auto_delivery in list(auto_deliveries)[start_offset:end_offset]:
                        keywords = ", ".join(auto_delivery.get("keywords")) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                        message = "\n".join(auto_delivery.get("message")) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                        btn = InlineKeyboardButton(
                            text=f'{keywords[:32]} ‚Üí {message}',
                            callback_data=CallbackDatas.AutoDeliveryPage(
                                index=auto_deliveries.index(auto_delivery)
                            ).pack()
                        )
                        rows.append([btn])
                        
                    buttons_row = []
                    if page > 0:
                        btn_back = InlineKeyboardButton(
                            text="‚Üê",
                            callback_data=CallbackDatas.AutoDeliveriesPagination(
                                page=page-1
                            ).pack()
                        )
                    else:
                        btn_back = InlineKeyboardButton(
                            text="üõë",
                            callback_data="123"
                        )
                    buttons_row.append(btn_back)
                        
                    btn_pages = InlineKeyboardButton(
                        text=f"{page+1}/{total_pages}",
                        callback_data="enter_auto_deliveries_page"
                    )
                    buttons_row.append(btn_pages)
                    
                    if page < total_pages-1:
                        btn_next = InlineKeyboardButton(
                            text="‚Üí",
                            callback_data=CallbackDatas.AutoDeliveriesPagination(
                                page=page+1
                            ).pack()
                        )
                    else:
                        btn_next = InlineKeyboardButton(
                            text="üõë",
                            callback_data="123"
                        )
                    buttons_row.append(btn_next)
                    rows.append(buttons_row)

                    btn1 = InlineKeyboardButton(
                        text="‚ûïüöÄ –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É",
                        callback_data="enter_auto_delivery_keywords"
                    )
                    rows.append([btn1])
                    btn_exit = InlineKeyboardButton(
                        text="üö™ –í—ã—Ö–æ–¥",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="default"
                        ).pack()
                    )
                    rows.append([btn_exit])
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
                    
            class Page:
                class Error:
                    def text() -> str:
                        msg = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b>" \
                            f"\n" \
                            f"\n‚Üí –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n‚Üí –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                        return msg

                class Loading:
                    def text() -> str:
                        msg = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b>" \
                            f"\n" \
                            f"\n‚Üí –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n‚Üí –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                        return msg

                class Default:
                    def text(index: int) -> str:
                        auto_deliveries = AutoDeliveries.get()
                        auto_delivery: dict = auto_deliveries[index]
                        keywords = "</code>, <code>".join(auto_delivery.get("keywords")) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                        message = "\n".join(auto_delivery.get("message")) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"

                        msg = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b>" \
                            f"\n" \
                            f"\n‚Üí –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: \n<code>{keywords}</code>" \
                            f"\n‚Üí –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: \n<blockquote>{message}</blockquote>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                        return msg
                    
                    def kb(index: int, page: int = 0) -> InlineKeyboardMarkup:
                        auto_deliveries = AutoDeliveries.get()
                        auto_delivery: dict = auto_deliveries[index]
                        keywords = ", ".join(auto_delivery.get("keywords")) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                        message = "\n".join(auto_delivery.get("message")) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"

                        btn1 = InlineKeyboardButton(
                            text=f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}",
                            callback_data="enter_new_auto_delivery_keywords"
                        )
                        btn2 = InlineKeyboardButton(
                            text=f"‚úçÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {message}",
                            callback_data="enter_new_auto_delivery_message"
                        )
                        btn3 = InlineKeyboardButton(
                            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É",
                            callback_data="confirm_deleting_auto_delivery"
                        )
                        btn_refresh = InlineKeyboardButton(
                            text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                            callback_data=CallbackDatas.AutoDeliveryPage(
                                index=index
                            ).pack()
                        )
                        btn_back = InlineKeyboardButton(
                            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                            callback_data=CallbackDatas.AutoDeliveriesPagination(
                                page=page
                            ).pack()
                        )
                        rows = [[btn1], [btn2], [btn3], [btn_refresh], [btn_back]]
                        markup = InlineKeyboardMarkup(inline_keyboard=rows)
                        return markup
                
            class EnterAutoDeliveryPage:
                def text() -> str:
                    msg = f"üìÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Üì" 
                    return msg
                
            class EnterAutoDeliveryKeywords:
                def text() -> str:
                    msg = f"üîë <b>–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ ‚Üì</b>" \
                            f"\n–í–≤–æ–¥—è—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é" \
                            f"\n–ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ –ø—Ä–∏–≤—è–∂–µ—Ç—Å—è –∫–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º, –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"
                    return msg
                
            class EnterAutoDeliveryMessage:
                def text() -> str:
                    msg = f"‚úâÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ ‚Üì</b>" \
                            f"\n–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"
                    return msg
                
            class ConfirmAddingAutoDelivery:
                def text(keywords, message) -> str:
                    keywords = ", ".join(keywords)
                    msg = f"‚ûïüöÄ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b>" \
                            f"\n–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: <code>{keywords}</code>" \
                            f"\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: <blockquote>{message}</blockquote>"
                    return msg

                def kb() -> InlineKeyboardMarkup:
                    btn1 = InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data="add_auto_delivery"
                    )
                    btn2 = InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data="destroy"
                    )
                    rows = [[btn1, btn2]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
                
            class AutoDeliveryAdded:
                def text(keywords) -> str:
                    keywords = ", ".join(keywords)
                    msg = f"‚úÖ –ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ <code>{keywords}</code> <b>–±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞</b>" 
                    return msg
                
            class EnterNewAutoDeliveryKeywords:
                def text(index: int) -> str:
                    auto_deliveries = AutoDeliveries.get()
                    keywords = ", ".join(auto_deliveries[index].get("keywords")) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    msg = f"üîë <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ ‚Üì</b>" \
                            f"\n–í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é" \
                            f"\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{keywords}</code>"
                    return msg
                
            class AutoDeliveryKeywordsChanged:
                def text(new) -> str:
                    msg = f"‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ <b>–±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã</b> –Ω–∞:\n<code>{new}</code>" 
                    return msg
                
            class EnterNewAutoDeliveryMessage:
                def text(index: int) -> str:
                    auto_deliveries = AutoDeliveries.get()
                    message = "\n".join(auto_deliveries[index].get("message")) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    msg = f"‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ ‚Üì</b>" \
                            f"\n–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <blockquote>{message}</blockquote>"
                    return msg
                
            class AutoDeliveryMessageChanged:
                def text(new) -> str:
                    msg = f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ <b>–±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ</b> –Ω–∞:\n<blockquote>{new}</blockquote>" 
                    return msg
                
            class ConfirmDeletingAutoDelivery:
                def text(index: int) -> str:
                    auto_deliveries = AutoDeliveries.get()
                    keywords = ", ".join(auto_deliveries[index].get("keywords")) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    msg = f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b>" \
                            f"\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:\n<code>{keywords}</code>" 
                    return msg

                def kb() -> InlineKeyboardMarkup:
                    btn1 = InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data="delete_auto_delivery"
                    )
                    btn2 = InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data="destroy"
                    )
                    rows = [[btn1, btn2]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
                
            class AutoDeliveryDeleted:
                def text(index: int) -> str:
                    auto_deliveries = AutoDeliveries.get()
                    keywords = auto_deliveries[index].get("keywords") or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    msg = f"‚úÖ –ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ <code>{keywords}</code> <b>–±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞</b>" 
                    return msg
            
        class Messages:
            class Pagination:
                def text() -> str:
                    messages = Messages.get()
                    if not messages:
                        raise Exception("–í –∫–æ–Ω—Ñ–∏–≥–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b> ‚Üí ‚úâÔ∏è <b>–°–æ–æ–±—â–µ–Ω–∏—è</b>" \
                            f"\n–í—Å–µ–≥–æ <b>{len(messages.keys())}</b> –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥–µ" \
                            f"\n\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üì"
                    return msg
                
                def kb(page: int = 0) -> InlineKeyboardMarkup:
                    messages = Messages.get()
                    if not messages:
                        raise Exception("–í –∫–æ–Ω—Ñ–∏–≥–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

                    rows = []
                    items_per_page = 8
                    total_pages = math.ceil(len(messages.keys())/items_per_page)
                    total_pages = total_pages if total_pages > 0 else 1

                    if page < 0:
                        page = 0
                    elif page >= total_pages:
                        page = total_pages-1

                    start_offset = page * items_per_page
                    end_offset = start_offset + items_per_page

                    for message_id in list(messages.keys())[start_offset:end_offset]:
                        btn = InlineKeyboardButton(
                            text=message_id,
                            callback_data=CallbackDatas.MessagePage(
                                message_id=message_id
                            ).pack()
                        )
                        rows.append([btn])
                        
                    buttons_row = []
                    if page > 0:
                        btn_back = InlineKeyboardButton(
                            text="‚Üê",
                            callback_data=CallbackDatas.MessagesPagination(
                                page=page-1
                            ).pack()
                        )
                    else:
                        btn_back = InlineKeyboardButton(
                            text="üõë",
                            callback_data="123"
                        )
                    buttons_row.append(btn_back)

                        
                    btn_pages = InlineKeyboardButton(
                        text=f"{page+1}/{total_pages}",
                        callback_data="enter_messages_page"
                    )
                    buttons_row.append(btn_pages)
                    
                    if page < total_pages-1:
                        btn_next = InlineKeyboardButton(
                            text="‚Üí",
                            callback_data=CallbackDatas.MessagesPagination(
                                page=page+1
                            ).pack()
                        )
                    else:
                        btn_next = InlineKeyboardButton(
                            text="üõë",
                            callback_data="123"
                        )
                    buttons_row.append(btn_next)
                    rows.append(buttons_row)

                    btn1 = InlineKeyboardButton(
                        text="üö™ –í—ã—Ö–æ–¥",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="default"
                        ).pack()
                    )
                    rows.append([btn1])
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
                
            class Page:
                class Error:
                    def text() -> str:
                        msg = f"‚úíÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>" \
                            f"\n" \
                            f"\n‚Üí ID —Å–æ–æ–±—â–µ–Ω–∏—è: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n‚Üí –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                        return msg

                class Loading:
                    def text() -> str:
                        msg = f"‚úíÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>" \
                            f"\n" \
                            f"\n‚Üí ID —Å–æ–æ–±—â–µ–Ω–∏—è: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n‚Üí –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                        return msg

                class Default:
                    def text(message_id) -> str:
                        messages = Messages.get()
                        message_text = "\n".join(messages[message_id]) if messages[message_id] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                        msg = f"‚úíÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>" \
                            f"\n" \
                            f"\n‚Üí ID —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{message_id}</code>" \
                            f"\n‚Üí –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: \n<blockquote>{message_text}</blockquote>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                        return msg
                    
                    def kb(message_id, page) -> InlineKeyboardMarkup:
                        messages = Messages.get()
                        message_text = "\n".join(messages[message_id]) if messages[message_id] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                        btn1 = InlineKeyboardButton(
                            text=f"‚úçÔ∏è –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}",
                            callback_data="enter_message_text"
                        )
                        btn_refresh = InlineKeyboardButton(
                            text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                            callback_data=CallbackDatas.MessagePage(
                                message_id=message_id
                            ).pack()
                        )
                        btn_back = InlineKeyboardButton(
                            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                            callback_data=CallbackDatas.MessagesPagination(
                                page=page
                            ).pack()
                        )
                        rows = [[btn1], [btn_refresh], [btn_back]]
                        markup = InlineKeyboardMarkup(inline_keyboard=rows)
                        return markup
                
            class EnterMessagesPage:
                def text() -> str:
                    msg = f"üìÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Üì" 
                    return msg
                
            class EnterMessageText:
                def text(message_id) -> str:
                    messages = Messages.get()
                    message_text = "\n".join(messages[message_id]) if messages[message_id] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    msg = f"‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ‚Üì</b>" \
                            f"\nID —Å–æ–æ–±—â–µ–Ω–∏—è: \n<code>{message_id}</code>" \
                            f"\n–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: \n<blockquote>{message_text}</blockquote>"
                    return msg
                
            class MessageTextChanged:
                def text(new, message_id) -> str:
                    msg = f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è <code>{message_id}</code> <b>–±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b> –Ω–∞:\n<blockquote>{new}</blockquote>" 
                    return msg
                
        class Other:
            class Error:
                def text() -> str:
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üîß –ü—Ä–æ—á–µ–µ</b>" \
                            f"\n" \
                            f"\n‚Üí –ß–∏—Ç–∞—Ç—å —á–∞—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n‚Üí –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n‚Üí –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n" \
                            f"\n‚Üí –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n‚Üí –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì" 
                    return msg

            class Loading:
                def text() -> str:
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üîß –ü—Ä–æ—á–µ–µ</b>" \
                            f"\n" \
                            f"\n‚Üí –ß–∏—Ç–∞—Ç—å —á–∞—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n‚Üí –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n‚Üí –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n" \
                            f"\n‚Üí –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n‚Üí –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì" 
                    return msg

            class Default:
                def text() -> str:
                    config = Config.get()
                    read_chat_before_sending_message_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["read_chat_before_sending_message_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                    auto_complete_deals_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["auto_complete_deals_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                    first_message_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["first_message_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                    custom_commands_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["custom_commands_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                    auto_deliveries_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["auto_deliveries_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                    messages_watermark_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["messages_watermark_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                    messages_watermark = config["messages_watermark"] if config["messages_watermark"] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üîß –ü—Ä–æ—á–µ–µ</b>" \
                            f"\n" \
                            f"\n‚Üí –ß–∏—Ç–∞—Ç—å —á–∞—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{read_chat_before_sending_message_enabled}</code>" \
                            f"\n‚Üí –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: <code>{auto_complete_deals_enabled}</code>" \
                            f"\n‚Üí –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{first_message_enabled}</code>" \
                            f"\n‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: <code>{custom_commands_enabled}</code>" \
                            f"\n‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞: <code>{auto_deliveries_enabled}</code>" \
                            f"\n" \
                            f"\n‚Üí –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: <code>{messages_watermark_enabled}</code>" \
                            f"\n‚Üí –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫: <code>{messages_watermark}</code>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì" 
                    return msg
                
                def kb() -> InlineKeyboardMarkup:
                    config = Config.get()
                    read_chat_before_sending_message_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["read_chat_before_sending_message_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                    auto_complete_deals_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["auto_complete_deals_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                    first_message_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["first_message_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                    custom_commands_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["custom_commands_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                    auto_deliveries_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["auto_deliveries_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                    messages_watermark_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["messages_watermark_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                    messages_watermark = config["messages_watermark"] if config["messages_watermark"] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                    btn1 = InlineKeyboardButton(
                        text=f"üëÄ –ß–∏—Ç–∞—Ç—å —á–∞—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: {read_chat_before_sending_message_enabled}",
                        callback_data="disable_read_chat_before_sending_message" if config["read_chat_before_sending_message_enabled"] else "enable_read_chat_before_sending_message"
                    )
                    btn2 = InlineKeyboardButton(
                        text=f"‚òëÔ∏è –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {auto_complete_deals_enabled}",
                        callback_data="disable_auto_complete_deals" if config["auto_complete_deals_enabled"] else "enable_auto_complete_deals"
                    )
                    btn3 = InlineKeyboardButton(
                        text=f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {first_message_enabled}",
                        callback_data="disable_first_message" if config["first_message_enabled"] else "enable_first_message"
                    )
                    btn4 = InlineKeyboardButton(
                        text=f"üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: {custom_commands_enabled}",
                        callback_data="disable_custom_commands" if config["custom_commands_enabled"] else "enable_custom_commands"
                    )
                    btn5 = InlineKeyboardButton(
                        text=f"üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞: {auto_deliveries_enabled}",
                        callback_data="disable_auto_delivery" if config["auto_deliveries_enabled"] else "enable_auto_delivery"
                    )
                    btn6 = InlineKeyboardButton(
                        text=f"¬©Ô∏è –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {messages_watermark_enabled}",
                        callback_data="disable_messages_watermark" if config["messages_watermark_enabled"] else "enable_messages_watermark"
                    )
                    btn7 = InlineKeyboardButton(
                        text=f"‚úçÔ∏è¬©Ô∏è –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫: {messages_watermark}",
                        callback_data="enter_messages_watermark"
                    )
                    btn_refresh = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="other"
                        ).pack()
                    )
                    btn_back = InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=CallbackDatas.BotSettingsNavigation(
                            to="default"
                        ).pack()
                    )
                    rows = [[btn1], [btn2], [btn3], [btn4], [btn5], [btn6], [btn7], [btn_refresh], [btn_back]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup

            class EnterMessagesWatermark:
                def text() -> str:
                    msg = f"‚úçÔ∏è¬©Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–¥—è–Ω–æ–∫ –∑–Ω–∞–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ‚Üì</b>" \
                          f"\n–≠—Ç–æ—Ç –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –±—É–¥–µ—Ç –ø–æ–¥ –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –±–æ—Ç–æ–º"
                    return msg

            class MessagesWatermarkChanged:
                def text(new) -> str:
                    msg = f"‚úÖ –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ <b>–±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b> –Ω–∞ <code>{new}</code>"
                    return msg
            
    class Modules:
        class Pagination:
            def text() -> str:
                modules = ModulesManager.get_modules()
                msg = f"üîå <b>–ú–æ–¥—É–ª–∏</b>" \
                        f"\n–í—Å–µ–≥–æ <b>{len(modules)}</b> –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π" \
                        f"\n\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Üì"
                return msg
            
            def kb(page: int = 0) -> InlineKeyboardMarkup:
                modules = ModulesManager.get_modules()

                rows = []
                items_per_page = 7
                total_pages = math.ceil(len(modules)/items_per_page)
                total_pages = total_pages if total_pages > 0 else 1

                if page < 0:
                    page = 0
                elif page >= total_pages:
                    page = total_pages-1

                start_offset = page * items_per_page
                end_offset = start_offset + items_per_page

                for module in list(modules)[start_offset:end_offset]:
                    btn = InlineKeyboardButton(
                        text=module.meta.name,
                        callback_data=CallbackDatas.ModulePage(
                            uuid=module.uuid
                        ).pack()
                    )
                    rows.append([btn])
                    
                buttons_row = []
                if page > 0:
                    btn_back = InlineKeyboardButton(
                        text="‚Üê",
                        callback_data=CallbackDatas.ModulesPagination(
                            page=page-1
                        ).pack()
                    )
                else:
                    btn_back = InlineKeyboardButton(
                        text="üõë",
                        callback_data="123"
                    )
                buttons_row.append(btn_back)
                    
                btn_pages = InlineKeyboardButton(
                    text=f"{page+1}/{total_pages}",
                    callback_data="enter_modules_page"
                )
                buttons_row.append(btn_pages)
                
                if page < total_pages-1:
                    btn_next = InlineKeyboardButton(
                        text="‚Üí",
                        callback_data=CallbackDatas.ModulesPagination(
                            page=page+1
                        ).pack()
                    )
                else:
                    btn_next = InlineKeyboardButton(
                        text="üõë",
                        callback_data="123"
                    )
                buttons_row.append(btn_next)
                rows.append(buttons_row)

                btn2 = InlineKeyboardButton(
                    text="üö™ –í—ã—Ö–æ–¥",
                    callback_data=CallbackDatas.MenuNavigation(
                        to="default"
                    ).pack()
                )
                rows.append([btn2])
                markup = InlineKeyboardMarkup(inline_keyboard=rows)
                return markup
            
        class Page:
            class Error:
                def text() -> str:
                    msg = f"üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–º</b>" \
                        f"\n" \
                        f"\n‚Üí –°–æ—Å—Ç–æ—è–Ω–∏–µ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n‚Üí UUID: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –ù–∞–∑–≤–∞–Ω–∏–µ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –í–µ—Ä—Å–∏—è: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –û–ø–∏—Å–∞–Ω–∏–µ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n‚Üí –ê–≤—Ç–æ—Ä—ã: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –°—Å—ã–ª–∫–∏: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–≤–ª–µ–Ω–∏—è ‚Üì"
                    return msg

            class Loading:
                def text() -> str:
                    msg = f"üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –º–æ–¥—É–ª–µ–º</b>" \
                        f"\n" \
                        f"\n‚Üí –°–æ—Å—Ç–æ—è–Ω–∏–µ: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n‚Üí UUID: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –ù–∞–∑–≤–∞–Ω–∏–µ: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –í–µ—Ä—Å–∏—è: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –û–ø–∏—Å–∞–Ω–∏–µ: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n‚Üí –ê–≤—Ç–æ—Ä—ã: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –°—Å—ã–ª–∫–∏: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–≤–ª–µ–Ω–∏—è ‚Üì"
                    return msg

            class Default:
                def text(module_uuid: UUID) -> str:
                    module: Module = ModulesManager.get_module_by_uuid(module_uuid)
                    if not module:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª—å")
                    
                    enabled = "üü¢ –í–∫–ª—é—á–µ–Ω" if module.enabled else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
                    msg = f"üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –º–æ–¥—É–ª–µ–º</b>" \
                        f"\n" \
                        f"\n‚Üí –°–æ—Å—Ç–æ—è–Ω–∏–µ: <code>{enabled}</code>" \
                        f"\n" \
                        f"\n‚Üí UUID: <code>{module.uuid}</code>" \
                        f"\n‚Üí –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{module.meta.name}</code>" \
                        f"\n‚Üí –í–µ—Ä—Å–∏—è: <code>{module.meta.version}</code>" \
                        f"\n‚Üí –û–ø–∏—Å–∞–Ω–∏–µ: <blockquote>{module.meta.description}</blockquote>" \
                        f"\n" \
                        f"\n‚Üí –ê–≤—Ç–æ—Ä—ã: <code>{module.meta.authors}</code>" \
                        f"\n‚Üí –°—Å—ã–ª–∫–∏: <code>{module.meta.links}</code>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–≤–ª–µ–Ω–∏—è ‚Üì"
                    return msg
                
                def kb(module_uuid: UUID, page: int) -> InlineKeyboardMarkup:
                    module: Module = ModulesManager.get_module_by_uuid(module_uuid)
                    if not module:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª—å")
                    
                    rows = []
                    if module.enabled:
                        btn_disable = InlineKeyboardButton(
                            text="üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å",
                            callback_data="disable_module"
                        )
                        rows.append([btn_disable])
                    else:
                        btn_enable = InlineKeyboardButton(
                            text="üü¢ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å",
                            callback_data="enable_module"
                        )
                        rows.append([btn_enable])
                    btn_refresh = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=CallbackDatas.ModulePage(
                            uuid=module_uuid
                        ).pack()
                    )
                    rows.append([btn_refresh])
                    btn_back = InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=CallbackDatas.ModulesPagination(
                            page=page
                        ).pack()
                    )
                    rows.append([btn_back])
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
              
class Callbacks:
    class CallSeller:
        def text(calling_name, chat_link) -> str:
            msg = f"üÜò <b>{calling_name}</b> —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–∞ –ø–æ–º–æ—â—å!" \
                  f"\n{chat_link}"
            return msg